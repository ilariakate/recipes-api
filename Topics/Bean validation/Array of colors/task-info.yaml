type: edu
files:
- name: src/task/Main.java
  visible: false
  text: |-
    package task;

    import org.springframework.boot.SpringApplication;
    import org.springframework.boot.autoconfigure.SpringBootApplication;

    @SpringBootApplication
    public class Main {
        public static void main(String[] args) {
            SpringApplication.run(Main.class, args);
        }
    }
  learner_created: false
- name: build.gradle
  visible: false
  text: |-
    buildscript {
        apply plugin: 'hyperskill'

        repositories {
            mavenCentral()
        }

        dependencies {
            classpath "org.springframework.boot:spring-boot-gradle-plugin:$hs.spring.bootVersion"
            classpath "io.spring.gradle:dependency-management-plugin:$hs.spring.dependencyManagementVersion"
        }
    }

    apply plugin: 'java'
    apply plugin: "org.springframework.boot"
    apply plugin: "io.spring.dependency-management"

    repositories {
        mavenCentral()
    }

    sourceSets.main.resources.srcDirs = ["resources"]

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
    }
  learner_created: false
- name: resources/application.properties
  visible: false
  text: |-
    server.port=28852
    management.endpoints.web.exposure.include=*
    management.endpoint.shutdown.enabled=true
  learner_created: false
- name: src/task/Controller.java
  visible: true
  text: |-
    package task;

    import org.springframework.web.bind.annotation.*;

    import javax.validation.*;
    import javax.validation.constraints.*;
    import java.util.*;
    import java.util.concurrent.*;

    @RestController
    public class Controller {

    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: |-
    import com.google.gson.Gson;
    import org.hyperskill.hstest.dynamic.DynamicTest;
    import org.hyperskill.hstest.dynamic.input.DynamicTesting;
    import org.hyperskill.hstest.exception.outcomes.WrongAnswer;
    import org.hyperskill.hstest.mocks.web.response.HttpResponse;
    import org.hyperskill.hstest.stage.SpringTest;

    import org.hyperskill.hstest.testcase.CheckResult;
    import task.Main;

    import static org.hyperskill.hstest.testcase.CheckResult.correct;


    public class Tests extends SpringTest {

        public Tests() {
            super(Main.class);
        }

        static void throwIfIncorrectStatusCode(HttpResponse response, int status) {
            if (response.getStatusCode() != status) {
                throw new WrongAnswer(response.getRequest().getMethod() +
                        " " + response.getRequest().getLocalUri() +
                        " should respond with status code " + status +
                        ", responded: " + response.getStatusCode() + "\n\n" +
                        "Response body:\n" + response.getContent());
            }
        }

        static class Colors {
            String[] colors;

            public Colors(String[] colors) {
                this.colors = colors;
            }
        }

        final Colors[] COLORS = new Colors[]{
                new Colors(new String[]{"a", "b", "c"}),
                new Colors(new String[]{"a", "b", "c", "d"}),
                new Colors(new String[]{"a", "b", "c", "d", "e"}),
                new Colors(new String[]{"a", "b", "c", "d", "e", "f"}),
                new Colors(new String[]{"a", "b", "c", "d", "e", "f", "1", "2", "3"}),
                new Colors(new String[]{"a", "b", "c", "d", "e", "f", "1", "2", "3", "4", "5"}),
                new Colors(new String[]{"a", "b", "c", "d", "e", "f", "1", "2", "3", "4", "5", "6"}),
        };

        final Colors[] INCORRECT_COLORS = new Colors[]{
                new Colors(null),
                new Colors(new String[]{}),
                new Colors(new String[]{"a"}),
                new Colors(new String[]{"a", "b"}),
                new Colors(new String[]{"a", "b", "c", "d", "e", "f", "1", "2", "3", "4", "5", "6", "7"}),
                new Colors(new String[]{"a", "b", "c", "d", "e", "f", "1", "2", "3", "4", "5", "6", "7", "8"}),
                new Colors(new String[]{"a", "b", "c", "d", "e", "f", "1", "2", "3", "4", "5", "6", "7", "8", "9"}),
                new Colors(new String[]{"a", "b", "c", "d", "e", "f", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a",
                        "b", "c", "d", "e", "f", "e"}),
                new Colors(new String[]{"a", "b", "c", "d", "e", "f", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a",
                        "b", "c", "d", "e", "f", "e", "a", "b", "c", "d", "e", "f", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a",
                        "b", "c", "d", "e", "f", "e", "a", "b", "c", "d", "e", "f", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a",
                        "b", "c", "d", "e", "f", "e"}),
        };

        final Gson gson = new Gson();

        @DynamicTest
        final DynamicTesting[] dt = new DynamicTesting[]{
                () -> testPostColors(COLORS[0], 200),
                () -> testPostColors(COLORS[1], 200),
                () -> testPostColors(COLORS[2], 200),
                () -> testPostColors(COLORS[3], 200),
                () -> testPostColors(COLORS[4], 200),
                () -> testPostColors(COLORS[5], 200),
                () -> testPostColors(COLORS[6], 200),

                () -> testPostColors(INCORRECT_COLORS[0], 400),
                () -> testPostColors(INCORRECT_COLORS[1], 400),
                () -> testPostColors(INCORRECT_COLORS[2], 400),
                () -> testPostColors(INCORRECT_COLORS[3], 400),
                () -> testPostColors(INCORRECT_COLORS[4], 400),
                () -> testPostColors(INCORRECT_COLORS[5], 400),
                () -> testPostColors(INCORRECT_COLORS[6], 400),
                () -> testPostColors(INCORRECT_COLORS[7], 400),
                () -> testPostColors(INCORRECT_COLORS[8], 400),
        };

        CheckResult testPostColors(Colors colors, int status) {
            HttpResponse response = post("/api/colors", gson.toJson(colors)).send();

            throwIfIncorrectStatusCode(response, status);

            return correct();
        }
    }
  learner_created: false
feedback_link: https://hyperskill.org/learn/step/15220#comment
status: Solved
feedback:
  message: Congratulations!
  time: Fri, 22 Apr 2022 14:16:06 UTC
record: -1
